// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nepremicnine__;

#nullable disable

namespace Nepremicnine__.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241217110844_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Nepremicnina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastnikId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LetoIzgradnje")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Posta")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PostnaSt")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Povrsina")
                        .HasColumnType("REAL");

                    b.Property<double>("Vrednost")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LastnikId");

                    b.ToTable("Nepremicnine", (string)null);
                });

            modelBuilder.Entity("Oglas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumObjave")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DatumPoteka")
                        .HasColumnType("TEXT");

                    b.Property<int>("NepremicninaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjavilId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipOglasa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NepremicninaId");

                    b.HasIndex("ObjavilId");

                    b.ToTable("Oglasi", (string)null);
                });

            modelBuilder.Entity("Placilo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mesec")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlaciloIdZunanji")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PogodbaId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Znesek")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PogodbaId");

                    b.ToTable("Placila", (string)null);
                });

            modelBuilder.Entity("Pogodba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumSklenitve")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdNepremicnine")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NajemnikId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NajemodajalecId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NepremicninaId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ZnesekNajemnine")
                        .HasColumnType("REAL");

                    b.Property<double>("ZnesekVarscine")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("NajemnikId");

                    b.HasIndex("NajemodajalecId");

                    b.HasIndex("NepremicninaId");

                    b.ToTable("Pogodbe", (string)null);
                });

            modelBuilder.Entity("Uporabnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DatumRojstva")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Geslo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipUporabnika")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Uporabniki", (string)null);
                });

            modelBuilder.Entity("Nepremicnina", b =>
                {
                    b.HasOne("Uporabnik", "Lastnik")
                        .WithMany()
                        .HasForeignKey("LastnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lastnik");
                });

            modelBuilder.Entity("Oglas", b =>
                {
                    b.HasOne("Nepremicnina", "Nepremicnina")
                        .WithMany()
                        .HasForeignKey("NepremicninaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uporabnik", "Objavil")
                        .WithMany()
                        .HasForeignKey("ObjavilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nepremicnina");

                    b.Navigation("Objavil");
                });

            modelBuilder.Entity("Placilo", b =>
                {
                    b.HasOne("Pogodba", "Pogodba")
                        .WithMany()
                        .HasForeignKey("PogodbaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pogodba");
                });

            modelBuilder.Entity("Pogodba", b =>
                {
                    b.HasOne("Uporabnik", "Najemnik")
                        .WithMany()
                        .HasForeignKey("NajemnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uporabnik", "Najemodajalec")
                        .WithMany()
                        .HasForeignKey("NajemodajalecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nepremicnina", "Nepremicnina")
                        .WithMany()
                        .HasForeignKey("NepremicninaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Najemnik");

                    b.Navigation("Najemodajalec");

                    b.Navigation("Nepremicnina");
                });
#pragma warning restore 612, 618
        }
    }
}
